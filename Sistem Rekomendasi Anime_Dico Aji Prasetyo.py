# -*- coding: utf-8 -*-
"""(anime)submission2_6_machineLearningTerapan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xdL_vUKrQujDEnjwmWKsCj0SqDpvBUkr

# Proyek Akhir : Sistem Rekomendasi Anime 

Nama : Dico Aji Prasetyo

Kelas : M02
"""

import pandas as pd
import numpy as np

anime = pd.read_csv('anime.csv')
#rating = pd.read_csv('rating.csv')

anime.info()

anime.isnull().sum()

anime.groupby('anime_id').sum()

"""Mengatasi Missing Value

"""

anime.isnull().sum()

anime['rating'] = anime['rating'].fillna((anime['rating'].mean()))
anime.isna().sum()

anime.dropna(axis=0, how='all')  
anime.isnull().sum()

import seaborn as sns
sns.heatmap(anime.isnull(),yticklabels=False,cbar=False,cmap='viridis')

anime = anime.dropna()

anime.isnull().sum()

"""Mengubah karakter (,) menjadi karakter (|) pada kolom genre"""

anime['genre'] = anime['genre'].str.replace(',',' | ')
anime

"""Mengurutkan anime berdasarkan anime_id kemudian memasukkannya ke dalam variabel fix_anime"""

fix_anime = anime.sort_values('anime_id', ascending=True)
fix_anime

"""Mengecek berapa jumlah fix_anime"""

len(fix_anime.anime_id.unique())

"""Membuat variabel preparation yang berisi dataframe fix_anime kemudian mengurutkan berdasarkan anime_id"""

preparation = fix_anime
preparation.sort_values('anime_id')

"""Hapus data duplicate dengan drop_duplicates() berdasarkan anime_id"""

# Membuang data duplikat pada variabel preparation
preparation = preparation.drop_duplicates('anime_id')
preparation

"""Konversi data series menjadi list. Dalam hal ini, menggunakan fungsi tolist() dari library numpy."""

# Mengonversi data series 'anime_id' menjadi dalam bentuk list
anime_ID = preparation['anime_id'].tolist()
 
# Mengonversi data series 'name' menjadi dalam bentuk list
anime_name = preparation['name'].tolist()
 
# Mengonversi data series 'genre' menjadi dalam bentuk list
anime_genre = preparation['genre'].tolist()
 
print(len(anime_ID))
print(len(anime_name))
print(len(anime_genre))

"""Membuat dictionary untuk menentukan pasangan key-value pada data movie_id, movie_name, dan movie_genre yang telah disiapkan sebelumnya."""

# Membuat dictionary untuk data 'anime_ID','anime_name' dan 'anime_genre'
anime_new = pd.DataFrame({
    'id': anime_ID,
    'anime_name': anime_name,
    'genre': anime_genre
})
anime_new

"""Modeling

Fungsi tfidfvectorizer() dari library sklearn
"""

from sklearn.feature_extraction.text import TfidfVectorizer
 
# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data genre
tf.fit(anime_new['genre']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()



"""Lakukan fit dan transformasi ke dalam bentuk matriks. """

tfidf_matrix = tf.fit_transform(anime_new['genre']) 
tfidf_matrix.shape

"""Menghasilkan vektor tf-idf dalam bentuk matriks, menggunakan fungsi todense(). """

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=anime_new.anime_name
).sample(22, axis=1).sample(10, axis=0)

""" **Cosine Similarity**
 menghitung derajat kesamaan (similarity degree) antar movie dengan teknik cosine similarity.
"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

"""Lihat matriks kesamaan setiap anime dengan menampilkan judul anime dalam 5 sampel kolom"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=anime_new['anime_name'], columns=anime_new['anime_name'])
print('Shape:', cosine_sim_df.shape)
 
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Buat fungsi anime_recommendations dengan beberapa parameter sebagai berikut:

- nama_anime : Nama judul dari movie tersebut (index kemiripan dataframe).  
- Similarity_data : Dataframe mengenai similarity yang telah kita didefinisikan sebelumnya
- Items : Nama dan fitur yang digunakan untuk mendefinisikan kemiripan, dalam hal ini adalah ‘anime_name’ dan ‘genre’.  
- k : Banyak rekomendasi yang ingin diberikan.  



"""

def anime_recommendations(nama_anime, similarity_data=cosine_sim_df, items=anime_new[['anime_name', 'genre']], k=5):
   
 
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_anime].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop nama_anime agar nama movie yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_anime, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

"""
Terapkan kode di atas untuk menemukan rekomendasi anime yang mirip dengan anime Gintama."""

anime_new[anime_new.anime_name.eq('Gintama')]

"""Mendapatkan rekomendasi anime yang mirip dengan Gintama.


"""

anime_recommendations('Gintama')

"""Dari hasil rekomendasi di atas, diketahui bahwa Gintama termasuk ke dalam genre  Action|Comedy|Histical|Parody|Samurai|Sci-Fi|Shounen. Dari 5 item yang direkomendasikan, 5 item memiliki genre yang sama dengan Gintama walaupun termasuk anime Gintama namun dengan versi yang berbeda."""